@echo off
:: Safe Environment Test Script
:: This script validates the environment without risky operations that could cause disconnection
setlocal EnableDelayedExpansion

:: Color definitions for Windows
set "GREEN=[92m"
set "RED=[91m"
set "YELLOW=[93m"
set "BLUE=[94m"
set "NC=[0m"

echo %BLUE%=== Lingora Environment Safety Test ===%NC%
echo %BLUE%This test validates the environment without risky operations%NC%
echo.

:: Set paths
set "LINGORA_ROOT=%~dp0.."
set "BACKEND_ROOT=%LINGORA_ROOT%\backend"
set "AI_SERVICES_ROOT=%BACKEND_ROOT%\ai_services"
set "FRONTEND_ROOT=%LINGORA_ROOT%\frontend"

echo %YELLOW%üîç Validating directory structure...%NC%

:: Check Lingora root
if exist "%LINGORA_ROOT%" (
    echo %GREEN%‚úÖ Lingora root directory exists%NC%
) else (
    echo %RED%‚ùå Lingora root directory not found%NC%
    exit /b 1
)

:: Check backend directory
if exist "%BACKEND_ROOT%" (
    echo %GREEN%‚úÖ Backend directory exists%NC%
) else (
    echo %RED%‚ùå Backend directory not found%NC%
    exit /b 1
)

:: Check AI services directory
if exist "%AI_SERVICES_ROOT%" (
    echo %GREEN%‚úÖ AI services directory exists%NC%
) else (
    echo %RED%‚ùå AI services directory not found%NC%
    exit /b 1
)

:: Check frontend directory
if exist "%FRONTEND_ROOT%" (
    echo %GREEN%‚úÖ Frontend directory exists%NC%
) else (
    echo %RED%‚ùå Frontend directory not found%NC%
    exit /b 1
)

echo.
echo %YELLOW%üîç Checking critical files...%NC%

:: Check AI service files (without executing)
if exist "%AI_SERVICES_ROOT%\embedding_service.py" (
    echo %GREEN%‚úÖ AI embedding service script found%NC%
) else (
    echo %RED%‚ùå AI embedding service script not found%NC%
)

if exist "%AI_SERVICES_ROOT%\ai_search_env\Scripts\python.exe" (
    echo %GREEN%‚úÖ Python virtual environment found%NC%
) else (
    echo %RED%‚ùå Python virtual environment not found%NC%
)

:: Check frontend files (without executing)
if exist "%FRONTEND_ROOT%\package.json" (
    echo %GREEN%‚úÖ Frontend package.json found%NC%
) else (
    echo %RED%‚ùå Frontend package.json not found%NC%
)

if exist "%FRONTEND_ROOT%\src" (
    echo %GREEN%‚úÖ Frontend src directory found%NC%
) else (
    echo %RED%‚ùå Frontend src directory not found%NC%
)

echo.
echo %YELLOW%üîç Checking XAMPP paths...%NC%

:: Check XAMPP installation (common paths)
set "XAMPP_FOUND=0"
if exist "C:\xampp\apache\bin\httpd.exe" (
    echo %GREEN%‚úÖ XAMPP Apache found at C:\xampp%NC%
    set "XAMPP_FOUND=1"
) else if exist "C:\XAMPP\apache\bin\httpd.exe" (
    echo %GREEN%‚úÖ XAMPP Apache found at C:\XAMPP%NC%
    set "XAMPP_FOUND=1"
) else (
    echo %YELLOW%‚ö†Ô∏è  XAMPP not found in standard locations%NC%
)

if "%XAMPP_FOUND%"=="1" (
    echo %GREEN%‚úÖ XAMPP installation validated%NC%
) else (
    echo %YELLOW%‚ö†Ô∏è  XAMPP may need manual verification%NC%
)

echo.
echo %YELLOW%üîç Testing basic system commands...%NC%

:: Test basic commands that scripts will use (without risky operations)
tasklist >nul 2>&1
if "%ERRORLEVEL%"=="0" (
    echo %GREEN%‚úÖ tasklist command available%NC%
) else (
    echo %RED%‚ùå tasklist command not available%NC%
)

timeout /t 1 /nobreak >nul 2>&1
if "%ERRORLEVEL%"=="0" (
    echo %GREEN%‚úÖ timeout command available%NC%
) else (
    echo %RED%‚ùå timeout command not available%NC%
)

powershell -Command "Write-Host 'PowerShell test successful'" >nul 2>&1
if "%ERRORLEVEL%"=="0" (
    echo %GREEN%‚úÖ PowerShell available%NC%
) else (
    echo %RED%‚ùå PowerShell not available%NC%
)

echo.
echo %BLUE%=== Environment Safety Test Complete ===%NC%
echo %GREEN%‚úÖ All checks completed without risky operations%NC%
echo %GREEN%‚úÖ No background processes started%NC%
echo %GREEN%‚úÖ No services modified%NC%
echo %GREEN%‚úÖ Claude Code session safe%NC%
echo.
echo %YELLOW%üìã Summary:%NC%
echo    - Environment structure validated
echo    - Critical files checked
echo    - System commands verified
echo    - Ready for safe service startup
echo.
exit /b 0